import React from 'react';
import { StyleSheet, Text, View, TouchableOpacity } from 'react-native';
import RNSpeedometer from 'react-native-speedometer';
import { useRoute, useNavigation } from '@react-navigation/native';

export default function RiskGraphScreen() {
  const route = useRoute();
  const navigation = useNavigation();
  // PlannerÏóêÏÑú Ï†ÑÎã¨Îêú riskValue ÏÇ¨Ïö©
  const riskValue = route.params?.riskValue ?? null;

  // ÌïúÍ∏ÄÎßå ÎÇòÏò§Îäî Î†àÏù¥Î∏î Î∞è ÏÉâÏÉÅ
  const getLevel = (v) => {
    if (v === null) return null;
    if (v <= 30) return { label: 'ÎÇÆÏùå', color: '#7CFC00' };
    if (v <= 70) return { label: 'Î≥¥ÌÜµ', color: '#FFA500' };
    return { label: 'ÎÜíÏùå', color: '#FF0000' };
  };

  const levelInfo = getLevel(riskValue);

  let message = '';
  let policies = [];
  let messageColor = '#2c3e50';

  if (riskValue === null) {
    message = 'ÏúÑÌóòÎèÑ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.';
    policies = [];
    messageColor = '#2c3e50';
  } else if (riskValue <= 30) {
    message = 'Ïûò ÌïòÍ≥† ÏûàÏäµÎãàÎã§! ÎãπÏã†ÏóêÍ≤å ÌïÑÏöîÌïú Î≥µÏßÄÏ†ïÏ±Ö Top3';
    policies = ['Ï≤≠ÎÖÑ ÎÇ¥ÏùºÏ±ÑÏõÄÍ≥µÏ†ú', 'Ï£ºÍ±∞Í∏âÏó¨ ÏßÄÏõê', 'Î¨∏ÌôîÎàÑÎ¶¨Ïπ¥Îìú'];
    messageColor = '#2980ef';
  } else if (riskValue <= 70) {
    message = 'Î≥¥ÌÜµÏûÖÎãàÎã§! ÌïÑÏöîÌïú Î≥µÏßÄÏ†ïÏ±Ö Top3';
    policies = ['Í∏¥Í∏âÎ≥µÏßÄÏßÄÏõêÏ†úÎèÑ', 'Í∑ºÎ°úÏû•Î†§Í∏à', 'Íµ≠ÎØºÏ∑®ÏóÖÏßÄÏõêÏ†úÎèÑ'];
    messageColor = '#f1c40f';
  } else {
    message = 'ÏúÑÌóòÌï©ÎãàÎã§! Íº≠ ÌôïÏù∏ÌïòÏÑ∏Ïöî! Î≥µÏßÄÏ†ïÏ±Ö Top3';
    policies = ['Í∏∞Ï¥àÏÉùÌôúÎ≥¥Ïû•Ï†úÎèÑ', 'Í∏¥Í∏âÏÉùÍ≥ÑÎπÑ ÏßÄÏõê', 'Ïã†Ïö©ÌöåÎ≥µÏßÄÏõê'];
    messageColor = '#e74c3c';
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>üí∞ Í∏àÏúµ ÏúÑÌóòÎèÑ Î∂ÑÏÑù</Text>
      <View style={styles.gaugeContainer}>
        <RNSpeedometer
          value={riskValue || 0}
          minValue={0}
          maxValue={100}
          size={220}
          labels={[
            { name: 'ÎÇÆÏùå', labelColor: '#7CFC00', activeBarColor: '#7CFC00' },
            { name: 'Î≥¥ÌÜµ', labelColor: '#FFA500', activeBarColor: '#FFA500' },
            { name: 'ÎÜíÏùå', labelColor: '#FF0000', activeBarColor: '#FF0000' },
          ]}
        />
      </View>
      <View style={{ height: 60 }} />
      <Text style={[styles.message, { color: messageColor }]}>{message}</Text>
      {Array.isArray(policies) && policies.length > 0 && (
        <View style={styles.policyBox}>
          {policies.map((policy, idx) => (
            <Text key={idx} style={styles.policyText}>
              {`${idx + 1}. ${policy}`}
            </Text>
          ))}
        </View>
      )}

      {/* Î≥µÏßÄÏ†ïÏ±Ö ÎçîÎ≥¥Í∏∞ Î≤ÑÌäº */}
      <TouchableOpacity
        style={styles.moreButton}
        onPress={() => navigation.navigate('PolicyRecommendation')}
        activeOpacity={0.8}
      >
        <Text style={styles.moreButtonText}>Î≥µÏßÄÏ†ïÏ±Ö ÎçîÎ≥¥Í∏∞</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    backgroundColor: '#f8f9fa',
    justifyContent: 'center',
  },
  title: {
    fontSize: 26,
    fontWeight: '700',
    textAlign: 'center',
    color: '#2c3e50',
    marginBottom: 20,
  },
  gaugeContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    marginVertical: 10,
  },
  message: {
    fontSize: 20,
    fontWeight: 'bold',
    textAlign: 'center',
    marginHorizontal: 20,
  },
  policyBox: {
    backgroundColor: '#fff',
    borderRadius: 10,
    padding: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOpacity: 0.05,
    shadowRadius: 4,
    marginBottom: 16,
    marginTop: 16,
  },
  policyText: {
    fontSize: 17,
    marginVertical: 4,
    color: '#34495e',
  },
  moreButton: {
    marginTop: 12,
    alignSelf: 'center',
    backgroundColor: '#2980b9',
    borderRadius: 8,
    paddingHorizontal: 28,
    paddingVertical: 12,
    elevation: 2,
  },
  moreButtonText: {
    color: '#fff',
    fontSize: 17,
    fontWeight: 'bold',
    letterSpacing: 1,
  },
});
